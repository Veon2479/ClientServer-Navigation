Класс UserModel реализует накопление данных и записи их в файл, согласно переданного ID. (далее ID == пользователь)
==========================
Используется:
	Server: Алексей
	IDModel: Татьяна
==========================
Типы:
----------------------------------------------------
        protected internal struct UserModelPositionData{
            internal double X, Y;
            internal long Time;        
        }
		Структура, которая хранит координаты (X, Y) о 1 пользователе в указаную единицу времени (Time)
		douglbe X, Y - координаты
		long Time - время UNIX
----------------------------------------------------
        protected internal struct UserModelTempStorageEl{
            internal string FileName;
            internal int Count; //Alos using as flag "does ID exist"
            internal UserModelPositionData[] AccumData;
        }
		Структура, которая хранит инфомацию, необходимую для накопления информации о пользователе и записи её в файл
		FileName - имя файла, в который производится запись
		Count - сколь элементов уже накопленно 
		AccumData - массив, в котором накапливаются данные
==========================
Поля:
----------------------------------------------------
	private const string DEFAULT_DIR = "ID_Data";
		Директория по умолчанию, в котороую будут складываться накопленные данных пользователей
----------------------------------------------------
	private const int NO_ID = -1;
		Константа NO_ID для идентификации "свободных" ID
----------------------------------------------------
        private int _accumDataSize = 0;
		Размер временного хранилища (сколько записей для каждого пользователя там будет храниться)
----------------------------------------------------
        private int _amountOfUsers = 0;
		Размер таблицы пользователей (сколько пользователей максимально будет в таблице). Увеличивает в 2 раза при необходимости
==========================
Методы:

/*************************/
Все коды ошибок хранятся в enum c именем %имя_функции% + ErrorCode
(AddUserID - AddUserIDErrorCode)
/*************************/


Public: 
----------------------------------------------------
	public UserModel(int amountOfUsers, int accumDataSize)
	Описание:
		Конструктор, создаёт объект класса (UserModel), создаёт временное хранилище, согласно переданным параметрам
		
	Параметры:
		int amountofUsers - задаёт значение _amountOfUsers(Размер таблицы пользователей (сколько пользователей максимально будет в таблице). Увеличивает в 2 раза при необходимости)
		int accumDataSize - задёт значение _amountOfUsers(Размер временного хранилища (сколько записей для каждого пользователя там будет храниться))
	Возвращаемое значение:
		Всё, что и любой конструктор
----------------------------------------------------
	public int AddUserID(int ID, double x, double y, long time)
	Описание:
		Добавляет новый ID во временное хранилище, заполняеит первое по счёту поле хранилища переданными данными, 
		формирует имя файла, в который будут записываться накопленные данные
	Параметры:
		int ID - ID, который нужно добавить в хранилище
		double X, Y - Координаты пользователя
		time - UNIX время
	Возвражаемые значения:
		>= 0 всё ок, иначе ошибка
	Коды ошибок:
		-1 (ID_INCORRECT): Неверный ID, (ID < 0)
		-2 (RESIZE_ERROR): Ошибка при resize (недостаточно памяти или чего нить исчо)
		-3 (ID_OCCUPIED): Такой ID уже занят
----------------------------------------------------
	public int AppendUserData(int ID, double x, double y, long time)
	Описание:
		Дописывает информацию о пользователе в хранилище, если хранилище полностью заполнено, вызывается "SaveStorageEl", который 
		дописывает данные из хранили в файл. Хранили после записи данных в файл заполняется переданными данными
	Параметры:
		int ID - ID, информацию о котором нужно дополнить
		double X, Y - Координаты пользователя
		time - UNIX время
	Возвражаемые значения:
		>= 0 всё ок, иначе ошибка
	Коды ошибок:
		-1 (ID_INCORRECT): Неверный ID, выход за границу массива
		-2 (ID_NOT_EXIST): ID не существует (установлен во "Свободен")
		-3 (WRITE_FILE_ERROR): Ошибка записи в файл. Смотри ошиби метода "SaveStorageEl"
----------------------------------------------------
	public int CloseUserID(int ID)
	Описание:
		Принудительно записывает данные о пользователе в файл (вызов SaveStorageEl) и устанавливает ID в "Свободен"
	Параметры:
		int ID - Очищаемый ID
	Возвражаемые значения:
		>= 0 всё ок, иначе ошибка
	Коды ошибок:
		-1 (ID_INCORRECT): Неверный ID, выход за границу массива
		-2 (WRITE_FILE_ERROR): Ошибка записи в файл. Смотри ошиби метода "SaveStorageEl"
----------------------------------------------------
	public int FlushTempStorage()
	Описание:
		Для кажго ID, который "Установлен" принудительно записывает его данные в файл (вызов SaveStorageEl) и устанавливает его в "Свободен"
	Параметры:
		None
	Возвражаемые значения:
		>= 0 всё ок, иначе ошибка
	Коды ошибок:
		-1 (WRITE_FILE_ERROR): Ошибка записи в файл. Смотри ошиби метода "SaveStorageEl"

Private:
----------------------------------------------------
	private int SaveStorageEl(UserModelTempStorageEl tempStorageEl)
	Описаиние:
		Сохраняет (tempStorageEl.Count) записей данных vfccbdf (tempStorageEl.AccumData) в файл с именем (tempStorageEl.FileName).
		(tempStorageEl.Count) по оаончанию устанавливается в 0
	Параметры:
		tempStorageEl - структруа, хранящая накопленные данные и информацию о файле в который необходимо записать данные
	Возвражаемые значения:
		>= 0 всё ок, иначе ошибка
	Коды ошибок:
		-1 (WRITE_FILE_ERROR): Ошибка записи в файл (нет такой директории, неправильное имя файла, невозможно открыть, невозможно записать, невозможно закрыть поток ...)	 
	
	
	






